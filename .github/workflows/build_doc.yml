#
# This is a github generation workflow to create different output formats out of the md files stored in /src
# Thanks to Simon DÃ¼ckert for inventing the basic workflow and thus pointing me to the right tools.
# See https://cogneon.de/2018/12/13/neuer-lernos-produktions-workflow/ 
#
 
name: Build Docs

# Triggers the workflow on push events but only for the master branch
on:
  push: 
    branches: [ master ]
  pull_request:
    branches: [ master ] 

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  build_pdf:
    name: Create the PDF output
    runs-on: ubuntu-latest
    steps:

    # Checks-out the repository under $GITHUB_WORKSPACE
    - uses: actions/checkout@v2

    # Prepare the pandoc run
    - name: Set step variables
      run: |
        echo "::set-env name=PROJECT::$(cat metadata/metadata.yml | grep ^title: | awk -F' ' '{ print $2 }' | tr -d '"')"
        echo "::set-env name=FILELIST::$(printf '%s ' `find src  -type f | grep -v '/images/' | sort` )"

    # call a pandoc/latex docker container that is capable of processing the eisvogel template
    - uses: docker://thomasweise/docker-pandoc
      with:
        args: "pandoc --from markdown --metadata-file=metadata/metadata.yml --resource-path=./src -t latex --data-dir=metadata --number-sections -V lang=de-de --verbose --template=eisvogel --output=out/${{env.PROJECT}}.pdf --toc ${{ env.FILELIST }}" 

    # save artifact for commit
    - name: Upload built pdf
      uses: actions/upload-artifact@v1
      with:
        name: pdf
        path: out/${{env.PROJECT}}.pdf

  build_docx:
    name: Create the DOCX output
    runs-on: ubuntu-latest
    steps:

    # Checks-out the repository under $GITHUB_WORKSPACE
    - uses: actions/checkout@v2

    # Prepare the pandoc run
    - name: Set step variables
      run: |
        echo "::set-env name=PROJECT::$(cat metadata/metadata.yml | grep ^title: | awk -F' ' '{ print $2 }' | tr -d '"')"
        echo "::set-env name=FILELIST::$(printf '%s ' `find src  -type f | grep -v '/images/' | sort` )"

    # call a pandoc/latex docker container that is capable of processing the eisvogel template
    - uses: docker://thomasweise/docker-pandoc
      with:
        args: "pandoc --from markdown -t docx -o out/${{env.PROJECT}}.docx --toc ${{ env.FILELIST }}" 

    # save artifact for commit
    - name: Upload built docx
      uses: actions/upload-artifact@v1
      with:
        name: docx
        path: out/${{env.PROJECT}}.docx

  build_html:
    name: Create the HTML output
    runs-on: ubuntu-latest
    steps:

    # Checks-out the repository under $GITHUB_WORKSPACE
    - uses: actions/checkout@v2

    # Prepare the pandoc run
    - name: Set step variables
      run: |
        echo "::set-env name=PROJECT::$(cat metadata/metadata.yml | grep ^title: | awk -F' ' '{ print $2 }' | tr -d '"')"
        echo "::set-env name=FILELIST::$(printf '%s ' `find src  -type f | grep -v '/images/' | sort` )"

    # call a pandoc/latex docker container that is capable of processing the eisvogel template
    - uses: docker://thomasweise/docker-pandoc
      with:
        args: "pandoc --from markdown --resource-path=./src --number-sections -V lang=de-de --verbose -s -o out/${{env.PROJECT}}.html --toc ${{ env.FILELIST }}" 

    # save artifact for commit
    - name: Upload built html
      uses: actions/upload-artifact@v1
      with:
        name: html
        path: out/${{env.PROJECT}}.html

  # typically, workflows don't push results back into the same repo. This one does
  push_back:
    name: Collect processing results
    needs: 
      - build_docx
      - build_pdf
      - build_html
    runs-on: ubuntu-latest
    steps:
    
    # Get the repo to be able to commit
    - uses: actions/checkout@v2

    # get the created docx
    - name: Download docx
      uses: actions/download-artifact@v1
      with:
        name: docx

    # get the created pdf
    - name: Download pdf
      uses: actions/download-artifact@v1
      with:
        name: pdf

    # move and commit to local repo
    - name: Commit files
      run: |
        mv docx/*.docx out
        mv pdf/*.pdf out
        mv html/*.html out
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add .
        git commit -m "Add changes" -a
        git pull

    # results are pushed back into the "out" directory of the remote repo.
    - name: Push changes
      uses: ad-m/github-push-action@master
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
